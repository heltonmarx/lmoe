{"name":"lmoe","tagline":"Last Man On Earth : Github Thoughts","body":"## Cross compile Go using Buildroot\r\n\r\nThis a simple tutorial to describe step-by-step how to \r\ncreate an environment to cross compile [Go](https://golang.org/) applications \r\nto run on a [BeagleBone Black](http://beagleboard.org/black) using \r\n[Buildroot](http://buildroot.uclibc.org/) toolchain.\r\n\r\n### Requirements\r\n - Buildroot (2015.02)\r\n - Go (1.4.2)\r\n - Ubuntu 14.04\r\n - BeagleBone Black.\r\n - It would be better execute buidroot and kernel install like `root`.\r\n\r\n### Environment\r\nInstall essential things first\r\n\r\n```\r\napt-get update\r\napt-get install -y build-essential libncurses5-dev \\\r\n\t\tbzr cvs git mercurial rsync subversion \\\r\n\t\tlibc6 libstdc++6 libncurses5 zlib1g lzop u-boot-tools \\\r\n\t\ttftpd-hpa nfs-kernel-server sqlite3 picocom\r\n```\r\n\r\n### Buildroot\r\nDownload and extract the Buildroot release (e.g: *2015.02*) on `/opt/toolchain/` directory:\r\n\r\n```\r\nmkdir -p /opt/toolchain\r\ncd /opt/toolchain\r\nwget http://buildroot.uclibc.org/downloads/buildroot-2015.02.tar.gz\r\ntar -xzvf buildroot-2015.02.tar.gz\r\ncd buildroot-2015.02\r\n```\r\n\r\nIt's already have a previous configuration to BeagleBone Black describe in\r\n`configs/beaglebone_defconfig`, so, it's a nice way to follow.\r\n\r\nInvoke those commands bellow to generate a `Makefile` and configure the system:\r\n\r\n```\r\nmake beaglebone_defconfig\r\nmake menuconfig\r\n```\r\n\r\nHere are some settings you should change on buildroot config\r\n(yeah!...I'll use sqlite...)\r\n\r\n```\r\nTarget Options --->\r\n\tARM instruction set (Thumb2)\r\nToolchain --->\r\n\tToolchain type (Buildroot toolchain) --->\r\n\tKernel Headers (Linux 3.12x kernel headers) --->\r\n\tC library (eglibc) --->\r\n\t[*] Enable C++ support\r\n\t[*] Build cross gdb for the host\r\n\t[*] Purge unwanted locales\r\n\t(C en_US de fr pt_br) Locales to keep\r\n\t(en_US) Generate locale data\r\n\t[*] Enable MMU support\r\n\t[*] Register toolchain within Eclipse Buildroot plug-in\r\nSystem configuration --->\r\n\t[*] Install timezone info\r\n\t(default) timezone list\r\n\t(America/Sao_Paulo) default local time\r\nKernel --->\r\n\t[] Linux Kernel\r\nTarget packages --->\r\n\tLibraries --->\r\n\t\tDatabase --->\r\n\t\t\t[*] sqlite\r\n\t\t\t\t[*] Command-line editing\r\n\t\t\t\t[*] Additional query optmizations (stat3)\r\n\t\t\t\t[*] Enable version 3 of the full-text search engine\r\n\tNetwork applications --->\r\n\t\t[*] dhcpd\r\n\t\t[*] iptables\r\n\t\t[*] iputils\r\n\t\t[*] openssh\r\nFilesystem images --->\r\n\t[*]tar the root filesystem\r\n\t\tCompression method (no compression)\r\n```\r\n\r\nSave, exit and initiate a full system build (This will take a while...):\r\n\r\n```\r\nmake all\r\n```\r\n\r\nOK, get the `u-boot` files and move them to a more visible directory (e.g.:`/opt/toolchain/output/`):\r\n\r\n```\r\nmkdir -p /opt/toolchain/output\r\ncp -a /opt/toolchain/buildroot-2015.02/output/images/MLO /opt/toolchain/output/\r\ncp -a /opt/toolchain/buildroot-2015.02/output/images/u-boot.img /opt/toolchain/output/\r\ncp -a /opt/toolchain/buildroot-2015.02/output/images/Env.txt /opt/toolchain/output/\r\n```\r\n\r\nNow, run to the hills...\r\n\r\n### Linux kernel 3.12\r\n\r\nDownload the Linux kernel 3.12 directly from BeagleBone [Github](git://github.com/beagleboard/kernel.git) repository:\r\n\r\n```\r\nmkdir -p /opt/toolchain/linux\r\ngit clone -b 3.12 git://github.com/beagleboard/kernel.git /opt/toolchain/linux\r\ncd /opt/toolchain/linux\r\nbash ./patch.sh\r\ncp configs/beaglebone kernel/arch/arm/configs/beaglebone_defconfig\r\nwget http://arago-project.org/git/projects/?p=am33x-cm3.git\\;a=blob_plain\\;f=bin/am335x-pm-firmware.bin\\;hb=HEAD -O kernel/firmware/am335x-pm-firmware.bin\r\n```\r\n\r\nSetting the `arm-linux-gcc` to your `$PATH`:\r\n\r\n```\r\nexport PATH=$PATH:/opt/toolchain/buildroot-2015.02/output/host/usr/bin/\r\n\r\n```\r\n\r\nCompile and generate an uImage file with a DTB blob, and kernel modules (This will take a while,again...)\r\n\r\n```\r\ncd /opt/toolchain/linux/kernel\r\nmake ARCH=arm CROSS_COMPILE=arm-linux- beaglebone_defconfig -j2\r\nmake ARCH=arm CROSS_COMPILE=arm-linux- uImage dtbs LOADADDR=0x80008000 -j2\r\nmake ARCH=arm CROSS_COMPILE=arm-linux- modules -j2\r\n```\r\nCopy uImage and DTB file to `/opt/toolchain/output` directory:\r\n\r\n```\r\ncp -a /opt/toolchain/linux/kernel/arch/arm/boot/uImage /opt/toolchain/output\r\ncp -a /opt/toolchain/linux/kernel/arch/arm/boot/dts/am335x-boneblack.dtb /opt/toolchain/output/\r\n```\r\n\r\n### Rootfs\r\nUntar rootfs generated by buildroot to install kernel modules:\r\n\r\n```\r\nmkdir -p /opt/toolchain/rootfs\r\ntar -xvf /opt/toolchain/buildroot-2015.02/output/images/rootfs.tar -C /opt/toolchain/rootfs\r\nmake ARCH=arm CROSS_COMPILE=arm-linux- INSTALL_MOD_PATH=/opt/toolchain/rootfs modules_install\r\nmake ARCH=arm CROSS_COMPILE=arm-linux- INSTALL_MOD_PATH=/opt/toolchain/rootfs firmware_install\r\n```\r\n\r\n### NFS\r\nThe great advantage of using NFS is that you compile binaries on your development environment,\r\ninstall binaries and export them, have instant response on your target system.\r\n\r\nEdit `/etc/exports` file, including the following line:\r\n\r\n```\r\n/opt/toolchain/rootfs\t*(rw,sync,fsid=0,no_root_squash,crossmnt,no_subtree_check,no_acl)\r\n```\r\n\r\nSo, restart the NFS service: `/etc/init.d/nfs-kernel-server restart`.\r\n\r\n\r\nCopy uboot files and kernel uImage to `tftpboot` directory:\r\n\r\n```\r\nmkdir -p /var/lib/tftpboot/boot/\r\ncp -a /opt/toolchain/output/uImage /var/lib/tftpboot/boot/\r\ncp -a /opt/toolchain/output/MLO /var/lib/tftpboot/boot/\r\ncp -a /opt/toolchain/output/u-boot.img /var/lib/tftpboot/boot/\r\ncp -a /opt/toolchain/output/am335x-boneblack.dtb /var/lib/tftpboot/boot/\r\n```\r\n\r\nConnect the BeagleBone to your serial port via uart1 (Debug Serial Header), and set commands in u-boot,\r\nto load your linux kernel from tftp and rootfs over NFS:\r\n\r\n```\r\nset ipaddr 192.168.0.15\r\nset serverip 192.168.0.50\r\nset gateway_ip 192.168.0.1\r\nset rootpath '/opt/toolchain/rootfs/production'\r\n\r\nset loadtftp 'tftpboot 0x80200000 /boot/uImage; tftpboot 0x815f0000 /boot/am335x-boneblack.dtb'\r\nset netargs 'setenv bootargs console=${console} ${optargs} root=/dev/nfs nfsroot=${serverip}:${rootpath},${nfsopts} rw ip=dhcp'\r\nset uenvcmd 'setenv autoload no;run loadtftp; run netargs; bootm 0x80200000 - 0x815f0000'\r\n\r\nrun uenvcmd\r\n```\r\n\r\n### Go\r\n1.4.2 it's a good start, I'll check go 1.5 later.\r\n\r\n#### Install go\r\n```\r\nwget https://storage.googleapis.com/golang/go1.4.2.linux-amd64.tar.gz\r\ntar -xzvf go1.4.2.linux-amd64.tar.gz -C /opt/\r\ncd /opt/go/src\r\nGOOS=linux GOARCH=arm ./make.bash --no-clean\r\nrm go1.4.2.linux-amd64.tar.gz\r\n```\r\n\r\nFeel more confortable using a local GOPATH like:\r\n\r\n```\r\ncd $HOME\r\nmkdir -p go\r\n```\r\n\r\nSet my `$USER` profile (`.bashrc`):\r\n\r\n```\r\nexport GOROOT=\"/opt/go\"\r\nexport GOPATH=\"$HOME/go\"\r\nexport PATH=$PATH:/opt/go/bin\r\n```\r\n#### Cross compilation\r\nCreate a simple go app:\r\n\r\n```\r\npackage main.go\r\n\r\nimport \"fmt\"\r\n\r\nfunc main() {\r\n\tfmt.Printf(\"Hello BeagleBone Black\\n\")\r\n}\r\n```\r\n\r\nUsing `Makefile` to the dirty job:\r\n\r\n```\r\nTARGET := hello\r\n\r\nall:\r\n\tgo build -o $(TARGET) $^\r\n\r\nbeagle:\r\n\tCC=arm-linux-gcc CGO_ENABLED=\"1\" GOARM=7 GOARCH=arm GOOS=linux go build -o $(TARGET) $^\r\n\r\nclean:\r\n\tgo clean\r\n\r\ninstall:\r\n\tcp -a $(TARGET) /opt/toolchain/rootfs/root/\r\n```\r\n\r\nCompile and install (copy TARGET to rootfs directory):\r\n\r\n```\r\nmake beagle ; make install\r\n```\r\nVoil√†, we have a cross-compiled go binary ready to running on a BeagleBone Black.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}